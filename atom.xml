<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WA_</title>
  
  <subtitle>我们度过的日常，都是接连不断的奇迹</subtitle>
  <link href="https://walgebra.github.io/atom.xml" rel="self"/>
  
  <link href="https://walgebra.github.io/"/>
  <updated>2023-08-07T15:06:11.494Z</updated>
  <id>https://walgebra.github.io/</id>
  
  <author>
    <name>WA_</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RESTFUL架构</title>
    <link href="https://walgebra.github.io/2023/08/07/RESTFUL%E6%9E%B6%E6%9E%84/"/>
    <id>https://walgebra.github.io/2023/08/07/RESTFUL%E6%9E%B6%E6%9E%84/</id>
    <published>2023-08-07T15:05:29.000Z</published>
    <updated>2023-08-07T15:06:11.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是REST"><a href="#什么是REST" class="headerlink" title="什么是REST"></a>什么是REST</h1><p>REST全称Representational State Transfer，中文意识是表征性状态转移，首次由HTTP规范主要编写者之一Roy Fielding提出，他提出REST就是想在符合架构原理的前提上，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。</p><p>REST指的是一组架构约束条件和原则。如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。</p><p>RESTful背后的理念就是使用Web的现有特征和能力， 更好地使用现有Web标准中的一些准则和约束。</p><h1 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h1><ul><li>资源与URI</li><li>资源统一接口</li><li>资源的表述</li><li>资源的连接</li><li>状态的转移</li></ul><h2 id="资源与URI"><a href="#资源与URI" class="headerlink" title="资源与URI"></a>资源与URI</h2><p>任何事物只要有被引用到的必要，它就是一个资源，资源要可以被识别，就需要有唯一标识，在Web中这个唯一标识就是URI（Uniform Resource Identifier）。</p><p>URI可以看作资源的地址或名称，没有URI表示的信息不能算是资源，只能算是资源的一些信息，URI的设计应该遵循可寻址原则，具有自描述性，而且在形式上给人直觉上的关联，例如：<code> https://github.com/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08</code></p><p>URI设计技巧：</p><ul><li>使用<code>_</code>或<code>-</code>来增强可读性</li><li>使用<code>/</code>来表示资源的层级关系</li><li>使用<code>?</code>来过滤资源</li><li>使用<code>,</code>或<code>;</code>表示同级资源</li></ul><h2 id="统一资源接口"><a href="#统一资源接口" class="headerlink" title="统一资源接口"></a>统一资源接口</h2><p>RESTful架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问。例如接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。</p><p>统一资源接口要求使用标准的方法对资源进行操作，所以URI只应该来表示资源的名称，而不应该包括资源的操作。</p><p>下面列出HTTP方法GET，DELETE，PUT和POST的典型用法:</p><p>GET</p><ul><li><p>安全且幂等</p></li><li><p>获取表示</p></li><li><p>变更时获取表示（缓存）</p></li><li><p>200（OK） - 表示已在响应中发出</p></li><li><p>204（无内容） - 资源有空表示</p></li><li><p>301（Moved Permanently）- 资源的URI已被更新</p></li><li><p>303（See Other）- 其他（如，负载均衡）</p></li><li><p>304（not modified）- 资源未更改（缓存）</p></li><li><p>400 （bad request）- 指代坏请求（如，参数错误）</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务端当前无法处理请求</p></li></ul><p>POST：</p><ul><li><p>不安全且不幂等</p></li><li><p>使用服务端管理的（自动产生）的实例号创建资源</p></li><li><p>创建子资源</p></li><li><p>部分更新资源</p></li><li><p>如果没有被修改，则不过更新资源（乐观锁）</p></li><li><p>200（OK）- 如果现有资源已被更改</p></li><li><p>201（created）- 如果新资源被创建</p></li><li><p>202（accepted）- 已接受处理请求但尚未完成（异步处理）</p></li><li><p>301（Moved Permanently）- 资源的URI被更新</p></li><li><p>303（See Other）- 其他（如，负载均衡）</p></li><li><p>400（bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</p></li><li><p>415 （unsupported media type）- 接受到的表示不受支持</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务当前无法处理请求</p></li></ul><p>PUT：</p><ul><li><p>不安全但幂等</p></li><li><p>用客户端管理的实例号创建一个资源</p></li><li><p>通过替换的方式更新资源</p></li><li><p>如果未被修改，则更新资源（乐观锁）</p></li><li><p>200 （OK）- 如果已存在资源被更改</p></li><li><p>201 （created）- 如果新资源被创建</p></li><li><p>301（Moved Permanently）- 资源的URI已更改</p></li><li><p>303 （See Other）- 其他（如，负载均衡）</p></li><li><p>400 （bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</p></li><li><p>415 （unsupported media type）- 接受到的表示不受支持</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务当前无法处理请求</p></li></ul><p>DELETE：</p><ul><li><p>不安全但幂等</p></li><li><p>删除资源</p></li><li><p>200 （OK）- 资源已被删除</p></li><li><p>301 （Moved Permanently）- 资源的URI已更改</p></li><li><p>303 （See Other）- 其他，如负载均衡</p></li><li><p>400 （bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务端当前无法处理请求</p></li></ul><h2 id="资源的表述"><a href="#资源的表述" class="headerlink" title="资源的表述"></a>资源的表述</h2><p>资源在外界的具体呈现，可以有多种表述(或成为表现、表示)形式，在客户端和服务端之间传送的也是资源的表述，而不是资源本身。 例如文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。</p><p>HTTP中客户端可以通过Accept头请求一种特定格式的表述，服务端则通过Content-Type告诉客户端资源的表述形式。</p><h2 id="资源的链接"><a href="#资源的链接" class="headerlink" title="资源的链接"></a>资源的链接</h2><p>把一个个把资源链接起来，要达到这个目的，就要求在表述格式里边加入链接来引导客户端。在《RESTful Web Services》一书中，作者把这种具有链接的特性成为连通性。</p><h2 id="状态的转移"><a href="#状态的转移" class="headerlink" title="状态的转移"></a>状态的转移</h2><p>REST原则中的无状态通信原则，要求服务端不应该保存客户端的状态。</p><h3 id="应用状态与资源状态"><a href="#应用状态与资源状态" class="headerlink" title="应用状态与资源状态"></a>应用状态与资源状态</h3><p>客户端负责维护应用状态，服务端负责维护资源状态。</p><p>客户端与服务端的交互必须是无状态的，每一次请求中包含处理该请求所需的信息，只有在接收到实际请求的时候，服务端才会关注应用状态。</p><p>这种无状态通信原则是的服务端和中介能够理解请求和响应，在多次请求中，同一客户端不需要依赖于同一个服务器，方便实现高可拓展和高可用的服务端。</p><h3 id="应用状态的转移"><a href="#应用状态的转移" class="headerlink" title="应用状态的转移"></a>应用状态的转移</h3><p> “会话”状态不是作为资源状态保存在服务端的，而是被客户端作为应用状态进行跟踪的。客户端应用状态在服务端提供的超媒体的指引下发生变迁。服务端通过超媒体告诉客户端当前状态有哪些后续状态可以进入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是REST&quot;&gt;&lt;a href=&quot;#什么是REST&quot; class=&quot;headerlink&quot; title=&quot;什么是REST&quot;&gt;&lt;/a&gt;什么是REST&lt;/h1&gt;&lt;p&gt;REST全称Representational State Transfer，中文意识是表征性状态转移</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://walgebra.github.io/2023/08/06/hello-world/"/>
    <id>https://walgebra.github.io/2023/08/06/hello-world/</id>
    <published>2023-08-06T08:51:24.804Z</published>
    <updated>2023-08-06T08:51:24.804Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
